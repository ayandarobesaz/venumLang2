program     -> decleration* EOF;

decleration -> varDecl | statement

varDecl     -> type IDENTIFIER ("=" expression)? ";"

statement   -> exprStmt
            | printStmt
            | block

block       -> "{" decleration* "}"

exprStmt    -> expression ";";
printStmt   -> "print" expression ";";

expression  -> assigment;
assigment   -> IDENTIFIER ("=" | "+=" | "*=" | "/=") expression 
            | equality;
equality    -> comparison ( ( "!=" | "==" ) comparison )*
comparison  -> term ( ( ">" | ">=" | "<" | "<=" ) term )*
term        -> factor ( ( "+" | "-") factor )*
factor      -> unary ( ( "*" | "/"  ) unary )*
unary       -> ( "!" | "-" ) unary | primary            
                                                                                 reference shuld be unary
primary     -> NUMBER | STRING | "true" | "false" | "null" | "(" expression ")" | "&"? IDENTIFIER | "*" expression
type        -> "BYTE" | "SHORT" | "INT" | "LONG"




Grammar notation	Code representation

Terminal	        Code to match and consume a token
Nonterminal     	Call to that ruleâ€™s function
|	                if or switch statement
* or +	            while or for loop
?	                if statement