@include "stdlib/string.vlang";
@include "stdlib/libsyscall.vlang";


func long printc(byte char) {
    long addr = &char;
    _syscall(SYS_WRITE, STDOUT, addr, 1);
}

func long printstr(str string) {
    int length = strlen(string);
    _syscall(SYS_WRITE, STDOUT, string, length);
}

func long println(str string) {    
    long ret = printstr(string);

    if( ret == strlen(string) ) {
        ret += _syscall(SYS_WRITE, STDOUT, "\n", 1);
    }

    return ret;
}

func int printint(long number) {
    str buffer = "123456789012345678901";

    asm {
        "mov   rdi, $number"
        "mov   rsi, $buffer"
        "xor   rcx, rcx"
        "mov   rax, rdi"
        "test  rax, rax"
        "jns   .L1"
        "mov   BYTE [rsi], '-' ; Add sign"
        "neg   rax"
        "mov   rdi, rax"
        "add   rsi, 1"
      ".L1:    ; get length of number in characters"
        "mov   rbx, 10"
      ".L1A:"
        "add   rcx, 1"
        "cqo       ; convert quad to oct (rax to rdx:rax)"
        "div   rbx"
        "test  rax, rax"
        "jnz   .L1A"
        "mov   rax, rdi"
        "mov   BYTE [rsi+rcx], 0"
      ".L2:"
        "cqo"
        "div   rbx"
        "add   dl, '0'"
        "sub   rcx, 1"
        "mov   BYTE [rsi+rcx], dl"
        "test  rcx, rcx"
        "jnz   .L2"
    }

    printstr(buffer);
    return 0;
}

func void _clear_input(long fd) {
    byte buf[1] = { 0 };
    while( buf[0] != 10 ) { _syscall(SYS_READ, fd, buf, 1); }
}

func long read(str buffer, long count) {
    _syscall(SYS_READ, STDIN, buffer, count);
}


@define O_RDONLY 0x0
@define O_WRONLY 0x1
@define O_CREAT  0x40
@define O_TRUNC  0x200
@define O_APPEND 0x400

func int fopen(str filename, str mode) {
    short STD_MODE = 420; // -rw-rw-r--
    byte R = 'r';
    byte W = 'w';
    byte A = 'a';
    byte P = '+';

    int fd;
    int flags;
    if( mode[0] == R ) {
        flags = O_RDONLY;
    }
    else if( mode[0] == W ) {
        flags = O_WRONLY | O_CREAT | O_TRUNC;
    }
    else if( mode[0] == A ) {
        flags = O_WRONLY | O_CREAT | O_APPEND; 
    }

    fd = _syscall(SYS_OPEN, filename, flags, STD_MODE);
    if( fd == -1 ) {
        printstr("An error occurred while trying to open file: ");
        println(filename);
    }

    return fd;
}

func long fwrite(int fd, str data) {
    long ret;
    int length = strlen(data);
    ret = _syscall(SYS_WRITE, fd, data, length);
    return ret;
}

func void fclose(int fd) {
    _syscall(SYS_CLOSE, fd, SYSNONE, SYSNONE);
}